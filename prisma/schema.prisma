// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    contracts     Contract[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum SignatureType {
    STRING
    CANVAS
}

model Signature {
    id             String        @id @default(cuid())
    content        String
    contractUserId String
    type           SignatureType
}

model ContractRecipient {
    id         String     @id @default(cuid())
    name       String
    email      String
    contractId String
    contract   Contract   @relation(fields: [contractId], references: [id])
    activity   Activity[]
}

enum ContractStatus {
    DRAFT
    PENDING
    SIGNED
}

model Contract {
    id         String              @id @default(cuid())
    name       String
    content    String
    createdAt  DateTime            @default(now())
    updatedAt  DateTime            @updatedAt
    recipients ContractRecipient[]
    status     ContractStatus
    userId     String
    user       User                @relation(fields: [userId], references: [id])
    emailSent  Boolean             @default(false)
    activity   Activity[]
}

model ContractDocument {
    id         String   @id @default(cuid())
    storageId  String
    contractId String
    createdAt  DateTime @default(now())
    userId     String
}

enum ActivityType {
    CONTRACT_CREATED
    CONTRACT_OPENED
    CONTRACT_SIGNED
    CONTRACT_UPDATED
}

model Activity {
    action      ActivityType
    id          String             @id @default(cuid())
    timestamp   DateTime           @default(now())
    userId      String
    contractId  String
    contract    Contract           @relation(fields: [contractId], references: [id])
    recipientId String?
    recipient   ContractRecipient? @relation(fields: [recipientId], references: [id])
}
